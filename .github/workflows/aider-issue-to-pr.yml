name: Aider Issue to PR workflow
on:
  workflow_call:
    inputs:
      base-branch:
        description: "Base branch to create PR against"
        required: true
        type: string
      chat-timeout:
        description: "Timeout for chat in minutes to prevent burning your credits"
        required: false
        type: number
        default: 10
      issue-number:
        description: "Issue number"
        required: false
        type: number
      pr-number:
        description: "PR number"
        required: false
        type: number
      comment-body:
        description: "Content of the comment"
        required: false
        type: string
      model:
        description: "Model to use"
        required: false
        type: string
        default: "claude-3-5-sonnet-20240620"
    secrets:
      openai_api_key:
        description: "OpenAI API key"
        required: false
      anthropic_api_key:
        description: "Anthropic API Key"
        required: false
      gemini_api_key:
        description: "Gemini API Key"
        required: false
      groq_api_key:
        description: "Groq API Key"
        required: false
      cohere_api_key:
        description: "Cohere API Key"
        required: false
      deepseek_api_key:
        description: "Deepseek API Key"
        required: false
      openrouter_api_key:
        description: "OpenRouter API Key"
        required: false

jobs:
  create-pull-request:
    permissions:
      issues: read
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Create a new branch
        uses: actions/github-script@v7
        id: create_branch
        with:
          script: |
            const kebabCase = (str) => str.toLowerCase().replace(/[^a-z0-9\s]/gi, '').replace(/\s+/g, '-');

            const fixBranchUrl = (url) => url
              .replace(/\/git\/commits/, '/commit')
              .replace(/api.github.com\/repos/, 'github.com');

            // New branch should be based on the base-branch, so we need to get its SHA
            const baseBranch = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: '${{ inputs.base-branch }}'
            });

            const { repo, owner } = context.repo;
            const branchName = 'feature/aider-' + kebabCase(context.payload.issue.title);
            const refName = `refs/heads/${branchName}`
            const refShortName = `heads/${branchName}`

            // Get existing ref if exists
            const existingRef = await github.rest.git.getRef({
              owner,
              repo,
              ref: refShortName
            }).catch(() => null);

            if (existingRef) {
              try {
                // If there's a branch for this ref, return the ref
                await github.rest.repos.getBranch({
                  owner,
                  repo,
                  branch: branchName
                });

                console.log(`Branch ${branchName} already exists with SHA ${existingRef.data.object.sha}`);
                console.log(`Branch URL: ${fixBranchUrl(existingRef.data.object.url)}`);

                return { ref: existingRef.data.ref }
              } catch (e) {
                console.error(e);
                // State recovery: If there's a ref but no branch, delete the ref and create a new branch
                // This can happen if the branch was deleted manually. The ref will still exist.
                console.log(`Branch ${branchName} doesn't exist, deleting ref ${refShortName}`);
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref: refShortName
                });
              }
            }

            // Create branch
            const result = await github.rest.git.createRef({
              owner,
              repo,
              ref: refName,
              sha: baseBranch.data.commit.sha
            });

            console.log(`Created branch ${branchName} with SHA ${result.data.object.sha}`);
            console.log(`Branch URL: ${fixBranchUrl(result.data.object.url)}`);

            return { ref: result.data.ref }

      - name: Get issue or PR
        uses: actions/github-script@v7
        id: get_issue_or_pr
        with:
          script: |
            const { repo, owner } = context.repo;
            let result;
            
            if (${{ inputs.issue-number }}) {
              console.log('Fetching issue #${{ inputs.issue-number }}')
              result = await github.rest.issues.get({
                owner,
                repo,
                issue_number: ${{ inputs.issue-number }}
              });
              console.log(`Fetched issue #${result.data.number}: ${result.data.title}`)
            } else if (${{ inputs.pr-number }}) {
              console.log('Fetching PR #${{ inputs.pr-number }}')
              result = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: ${{ inputs.pr-number }}
              });
              console.log(`Fetched PR #${result.data.number}: ${result.data.title}`)
            } else {
              throw new Error('Either issue-number or pr-number must be provided');
            }

            return { 
              title: result.data.title.replace(/"/g, "'").replace(/`/g, '\\`'), 
              body: result.data.body.replace(/"/g, "'").replace(/`/g, '\\`'),
            };
      - name: Create prompt
        uses: actions/github-script@v7
        id: create_prompt
        with:
          result-encoding: string
          script: |
            const title = `${{ fromJson(steps.get_issue_or_pr.outputs.result).title }}`;
            const body = `${{ inputs.comment-body || fromJson(steps.get_issue_or_pr.outputs.result).body }}`;

            return `Apply all necessary changes based on below issue description. \nIssue title: ${title}\nIssue description:\n${body}`;
      - name: Apply changes with Aider
        uses: mirrajabi/aider-github-action@main
        timeout-minutes: ${{ inputs.chat-timeout }}
        with:
          branch: ${{ fromJson(steps.create_branch.outputs.result).ref }}
          model: ${{ inputs.model }}
          aider_args: '--yes-always --architect --no-auto-lint --message "${{ steps.create_prompt.outputs.result }}" --chat-history-file ".aider.chat.history.md"'
          # API keys
          openai_api_key: ${{ secrets.openai_api_key }}
          anthropic_api_key: ${{ secrets.anthropic_api_key }}
          cohere_api_key: ${{ secrets.cohere_api_key }}
          deepseek_api_key: ${{ secrets.deepseek_api_key }}
          gemini_api_key: ${{ secrets.gemini_api_key }}
          groq_api_key: ${{ secrets.groq_api_key }}
          openrouter_api_key: ${{ secrets.openrouter_api_key }}

      - name: Create Pull Request or Update Existing
        uses: actions/github-script@v7
        id: create_or_update_pr
        env:
          ISSUE_TITLE: ${{ fromJson(steps.get_issue_or_pr.outputs.result).title }}
          BRANCH_REF: ${{ fromJson(steps.create_branch.outputs.result).ref }}
          BASE_BRANCH: ${{ inputs.base-branch }}
          ISSUE_NUMBER: ${{ inputs.issue-number }}
          PR_NUMBER: ${{ inputs.pr-number }}
        with:
          script: |
            const { repo, owner } = context.repo;
            const branchRef = process.env.BRANCH_REF;

            // If PR already exists, return it
            const pulls = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              per_page: 100
            });

            const existingPR = pulls.data.find((pr) => pr.head.ref === branchRef);
            if (existingPR) {
              console.log(`PR #${existingPR.number} already exists: ${existingPR.html_url}`);
              return existingPR;
            }

            const newPR = await github.rest.pulls.create({
              title: `[Aider] ${process.env.ISSUE_TITLE}`,
              owner,
              repo,
              head: branchRef,
              base: process.env.BASE_BRANCH,
              body: [
                'This PR is auto-generated by Aider Workflow.',
                `Fixes #${process.env.ISSUE_NUMBER}`,
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: newPR.data.number,
              labels: ['automated-pr']
            });

            console.log(`Created PR #${newPR.data.number}: ${newPR.data.html_url}`);
      - name: Check for chat history file
        run: |
          if [ -f ".aider.chat.history.md" ]; then
            echo "Chat history file exists"
          else
            echo "Chat history file not found"
            echo "Current directory contents:"
            ls -la
          fi
      - name: Upload aider chat history
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: aider-chat-output
          path: ".aider.chat.history.md"