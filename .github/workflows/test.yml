name: Test
on:
  workflow_call:
    inputs:
      base-branch:
        description: "Base branch to create PR against"
        required: true
        type: string
      chat-timeout:
        description: "Timeout for chat in minutes to prevent burning your credits"
        required: false
        type: number
        default: 10
      issue-number:
        description: "Issue number"
        required: true
        type: number
      model:
        description: "Model to use"
        required: false
        type: string
        default: "gpt-4-1106-preview"
    secrets:
      openai_api_key:
        description: "OpenAI API key"
        required: false
      anthropic_api_key:
        description: "Anthropic API Key"
        required: false
      gemini_api_key:
        description: "Gemini API Key"
        required: false
      groq_api_key:
        description: "Groq API Key"
        required: false
      cohere_api_key:
        description: "Cohere API Key"
        required: false
      deepseek_api_key:
        description: "Deepseek API Key"
        required: false
      openrouter_api_key:
        description: "OpenRouter API Key"
        required: false

jobs:
  create-pull-request:
    permissions:
      issues: read
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Create a new branch
        uses: actions/github-script@v7
        id: create_branch
        with:
          script: |
            const kebabCase = (str) => str.toLowerCase().replace(/[^a-z0-9\s]/gi, '').replace(/\s+/g, '-');

            const fixBranchUrl = (url) => url
              .replace(/\/git\/commits/, '/commit')
              .replace(/api.github.com\/repos/, 'github.com');

            // New branch should be based on the base-branch, so we need to get its SHA
            const baseBranch = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: '${{ inputs.base-branch }}'
            });

            const { repo, owner } = context.repo;
            const branchName = 'feature/aider-' + kebabCase(context.payload.issue.title);
            const refName = `refs/heads/${branchName}`
            const refShortName = `heads/${branchName}`

            // Get existing ref if exists
            const existingRef = await github.rest.git.getRef({
              owner,
              repo,
              ref: refShortName
            }).catch(() => null);

            if (existingRef) {
              try {
                // If there's a branch for this ref, return the ref
                await github.rest.repos.getBranch({
                  owner,
                  repo,
                  branch: branchName
                });

                console.log(`Branch ${branchName} already exists with SHA ${existingRef.data.object.sha}`);
                console.log(`Branch URL: ${fixBranchUrl(existingRef.data.object.url)}`);

                return { ref: existingRef.data.ref }
              } catch (e) {
                console.error(e);
                // State recovery: If there's a ref but no branch, delete the ref and create a new branch
                // This can happen if the branch was deleted manually. The ref will still exist.
                console.log(`Branch ${branchName} doesn't exist, deleting ref ${refShortName}`);
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref: refShortName
                });
              }
            }

            // Create branch
            const result = await github.rest.git.createRef({
              owner,
              repo,
              ref: refName,
              sha: baseBranch.data.commit.sha
            });

            console.log(`Created branch ${branchName} with SHA ${result.data.object.sha}`);
            console.log(`Branch URL: ${fixBranchUrl(result.data.object.url)}`);

            return { ref: result.data.ref }

      - name: Get issue
        uses: actions/github-script@v7
        id: get_issue
        with:
          script: |
            console.log('Fetching issue #${{ inputs.issue-number }}')
            const { repo, owner } = context.repo;
            const result = await github.rest.issues.get({
              owner,
              repo,
              issue_number: ${{ inputs.issue-number }}
            });
            console.log(`Fetched issue #${result.data.number}: ${result.data.title}`)

            return { 
              title: result.data.title.replace(/"/g, "'").replace(/`/g, '\\`'), 
              body: result.data.body.replace(/"/g, "'").replace(/`/g, '\\`'),
            };
      - name: Create prompt
        uses: actions/github-script@v7
        id: create_prompt
        with:
          result-encoding: string
          script: |
            const title = `${{ fromJson(steps.get_issue.outputs.result).title }}`;
            const body = `${{ fromJson(steps.get_issue.outputs.result).body }}`;

            return `Apply all necessary changes based on below issue description. \nIssue title: ${title}\nIssue description:\n${body}`;
      - name: Initialize PR creation
        uses: actions/github-script@v7
        id: init_pr
        with:
          script: |
            console.log('Starting Create Pull Request step');
            const { repo, owner } = context.repo;
            const branchRef = '${{ fromJson(steps.create_branch.outputs.result).ref }}';
            console.log(`Branch ref: ${branchRef}`);
            return { branchRef };
      - name: List open PRs
        uses: actions/github-script@v7
        id: list_prs
        with:
          script: |
            const { repo, owner } = context.repo;
            const branchRef = '${{ fromJson(steps.init_pr.outputs.result).branchRef }}';
            // If PR already exists, return it
            console.log('Listing open pull requests');
            const pulls = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              per_page: 100
            });
            console.log(`Found ${pulls.data.length} open pull requests`);

            console.log('Checking for existing PR');
            const existingPR = pulls.data.find((pr) => pr.head.ref === branchRef);
            console.log(existingPR);
            return { existingPR: existingPR || null };
      - name: Check for existing PR
        uses: actions/github-script@v7
        id: check_existing_pr
        with:
          script: |
            console.log('Checking for existing PR');
            const existingPRJson = '${{ toJson(fromJson(steps.list_prs.outputs.result).existingPR) }}';
            console.log('Existing PR JSON:', existingPRJson);
            const existingPR = JSON.parse(existingPRJson);
            
            if (existingPR) {
              console.log(`Existing PR found: #${existingPR.number} - ${existingPR.html_url}`);
              return { exists: true, pr: existingPR };
            }
            
            console.log('No existing PR found');
            return { exists: false };
      - name: Prepare PR creation data
        if: fromJson(steps.check_existing_pr.outputs.result).exists == false
        uses: actions/github-script@v7
        id: prepare_pr_data
        with:
          script: |
            console.log('Preparing data for PR creation');
            const { repo, owner } = context.repo;
            const branchRef = '${{ fromJson(steps.init_pr.outputs.result).branchRef }}';
            const title = '[Aider] ' + '${{ fromJson(steps.get_issue.outputs.result).title }}';
            
            console.log(`PR Title: ${title}`);
            console.log(`Head: ${branchRef}`);
            console.log(`Base: ${{ inputs.base-branch }}`);
            
            return { owner, repo, title, head: branchRef, base: '${{ inputs.base-branch }}' };
      - name: Create new PR
        if: fromJson(steps.check_existing_pr.outputs.result).exists == false
        uses: actions/github-script@v7
        id: create_new_pr
        with:
          script: |
            console.log('Creating new pull request');
            const prData = ${{ toJson(steps.prepare_pr_data.outputs.result) }};
            
            try {
              const newPR = await github.rest.pulls.create({
                ...prData,
                body: [
                  'This PR is auto-generated by Aider Workflow.',
                  `Fixes #${{ inputs.issue-number }}`,
                ].join('\n')
              });
              
              console.log(`Created new PR #${newPR.data.number}: ${newPR.data.html_url}`);
              return newPR.data;
            } catch (error) {
              console.error('Error creating PR:', error.message);
              throw error;
            }
      - name: Summarize PR status
        uses: actions/github-script@v7
        id: summarize_pr
        with:
          script: |
            const existingPRCheck = ${{ toJson(steps.check_existing_pr.outputs.result) }};
            if (existingPRCheck.exists) {
              console.log('Using existing PR');
              return existingPRCheck.pr;
            } else {
              console.log('Using newly created PR');
              return ${{ toJson(steps.create_new_pr.outputs.result) }};
            }
      - name: Add labels to PR
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const pr = ${{ toJson(fromJson(steps.create_or_return_pr.outputs.result)) }};
            console.log('Adding labels to the PR');
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pr.number,
              labels: ['automated-pr']
            });
            console.log('Labels added successfully');
