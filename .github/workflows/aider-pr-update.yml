name: Aider PR Update workflow
on:
  workflow_call:
    inputs:
      base-branch:
        description: "Base branch of the PR"
        required: true
        type: string
      chat-timeout:
        description: "Timeout for chat in minutes to prevent burning your credits"
        required: false
        type: number
        default: 10
      pr-number:
        description: "PR number"
        required: true
        type: number
      head-branch:
        description: "Head branch of the PR"
        required: true
        type: string
      head-sha:
        description: "SHA of the head commit"
        required: true
        type: string
      comment:
        description: "Comment that triggered the workflow"
        required: true
        type: string
      model:
        description: "Model to use"
        required: false
        type: string
        default: "claude-3-5-sonnet-20240620"
    secrets:
      openai_api_key:
        description: "OpenAI API key"
        required: false
      anthropic_api_key:
        description: "Anthropic API Key"
        required: false
      gemini_api_key:
        description: "Gemini API Key"
        required: false
      groq_api_key:
        description: "Groq API Key"
        required: false
      cohere_api_key:
        description: "Cohere API Key"
        required: false
      deepseek_api_key:
        description: "Deepseek API Key"
        required: false
      openrouter_api_key:
        description: "OpenRouter API Key"
        required: false

jobs:
  update-pull-request:
    permissions:
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.head-branch }}
          fetch-depth: 0

      - name: Create prompt
        id: create_prompt
        uses: actions/github-script@v7
        env:
          COMMENT: ${{ inputs.comment }}
        with:
          result-encoding: string
          script: |
            const comment = process.env.COMMENT;
            const prompt = comment.replace(/^\/aider\s*/, '');
            return `Apply all necessary changes to implement the following request: \n${prompt}`;
      - name: Apply changes with Aider
        uses: mirrajabi/aider-github-action@main
        timeout-minutes: ${{ inputs.chat-timeout }}
        with:
          branch: ${{ inputs.head-branch }}
          model: ${{ inputs.model }}
          aider_args: '--yes-always --architect --no-auto-lint --chat-history-file ".aider.chat.history.md" --map-tokens 4096'
          # API keys
          openai_api_key: ${{ secrets.openai_api_key }}
          anthropic_api_key: ${{ secrets.anthropic_api_key }}
          cohere_api_key: ${{ secrets.cohere_api_key }}
          deepseek_api_key: ${{ secrets.deepseek_api_key }}
          gemini_api_key: ${{ secrets.gemini_api_key }}
          groq_api_key: ${{ secrets.groq_api_key }}
          openrouter_api_key: ${{ secrets.openrouter_api_key }}
          custom_command: |
            python3 - <<EOF
            import subprocess
            import time
            import sys

            def run_aider():
                process = subprocess.Popen(
                    ['aider'] + '${{ inputs.aider_args }}'.split(),
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )

                # Wait for Aider to initialize
                while True:
                    output = process.stdout.readline()
                    print(output, end='')
                    if "architect>" in output:
                        break

                # Send the command
                command = '${{ steps.create_prompt.outputs.result }}'
                process.stdin.write(command + '\n')
                process.stdin.flush()

                # Monitor output
                last_output_time = time.time()
                while True:
                    output = process.stdout.readline()
                    if output:
                        print(output, end='')
                        last_output_time = time.time()
                    else:
                        if time.time() - last_output_time > 10:
                            break
                    
                    # Check if process has ended
                    if process.poll() is not None:
                        break

                # Close the process
                process.stdin.close()
                process.terminate()
                process.wait(timeout=10)

            run_aider()
            EOF

      - name: Check for chat history file
        run: |
          if [ -f ".aider.chat.history.md" ]; then
            echo "Chat history file exists"
          else
            echo "Chat history file not found"
            echo "Current directory contents:"
            ls -la
          fi

      - name: Upload aider chat history
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: aider-chat-output
          path: ".aider.chat.history.md"

      - name: Add comment to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ inputs.pr-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Aider has processed your request. Please review the changes and let me know if you need any further modifications.'
            })